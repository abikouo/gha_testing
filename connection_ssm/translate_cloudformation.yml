---
- name: Create resources playbook
  block:
    - name: Get image ID to create an instance
      amazon.aws.ec2_ami_info:
        filters:
          name: 'CentOS Stream 9 x86_64*'
      register: images

    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "10.30.0.0/16"
        name: "{{ resource_prefix }}-vpc"
        dns_support: true
        dns_hostnames: true
      register: vpc

    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: internet_gw

    - name: Create public subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.30.1.0/24"
        map_public: true
      register: public_subnet
    
    - name: Create private subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "10.30.3.0/24"
        map_public: true
      register: private_subnet
    
    - name: Allocate Elastic IP
      amazon.aws.ec2_eip:
        state: present
        release_on_disassociation: true
      register: allocate_eip

    - name: Create NAT gateway on public subnet
      amazon.aws.ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{ public_subnet.subnet.id }}"
        allocation_id: "{{ allocate_eip.allocation_id }}"
        if_exist_do_not_create: true
        wait: true
        wait_timeout: 600
      register: natgateway

    - name: Create Route table for public subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ public_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ internet_gw.gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: public
          route: internet
        state: present
    
    - name: Create Route table for private subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ natgateway.nat_gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: private
          route: gateway
        state: present

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ resource_prefix }}-sg"
        vpc_id: "{{ vpc.vpc.id }}"
        description: VPC security group
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 22
            to_port: 22
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: -1
        state: present
      register: secgroup

    - name: Ensure IAM instance role exists
      amazon.aws.iam_role:
        name: "ansible-test-{{ tiny_prefix }}-aws-ssm-role"
        assume_role_policy_document: "{{ lookup('file','ec2-trust-policy.json') }}"
        state: present
        create_instance_profile: yes
        managed_policy:
        - AmazonSSMManagedInstanceCore
        wait: True
      register: role_output

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}"
        instance_type: "t3.micro"
        # image_id: "{{ images.images.0.image_id }}"
        image_id: 'ami-03e2e61db681f1e1e'
        subnet_id: "{{ private_subnet.subnet.id }}"
        ebs_optimized: true
        instance_role: "{{ role_output.iam_role.role_name }}"
        user_data: |
          #!/bin/sh
          sudo dnf install -y python3 https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl start amazon-ssm-agent
        wait: true
        state: started
