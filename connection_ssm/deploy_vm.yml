---
- name: Create resources playbook
  block:
    - name: Get image ID to create an instance
      amazon.aws.ec2_ami_info:
        filters:
          name: 'CentOS Stream 9 x86_64*'
      register: images

    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "172.10.0.0/16"
        name: "{{ resource_prefix }}-vpc"
      register: vpc

    - name: Create a public subnet for bastion
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "172.10.3.0/24"
      register: subnet

    # - name: Create infrastructure with internet gateway
    #   when: associated_with_internet_gateway | default('false') | bool
    #   block:
    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: internet_gw

    # - name: Create Route table for Internet gateway
    #   amazon.aws.ec2_vpc_route_table:
    #     vpc_id: "{{ vpc.vpc.id }}"
    #     subnets:
    #       - "{{ subnet.subnet.id }}"
    #     routes:
    #       - dest: 0.0.0.0/0
    #         gateway_id: "{{ internet_gw.gateway_id }}"
    #     lookup: tag
    #     resource_tags:
    #       subnet: public
    #       route: internet
    #     state: present

    # - name: Create infrastructure with NAT gateway
    #   when: associated_with_nat_gateway | default('false') | bool
    #   block:
    - name: Create NAT gateway
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ subnet.subnet.id }}"
        if_exist_do_not_create: true
        wait: true
        state: present
        wait_timeout: 600
      register: nat_gw

    - name: Create Route table for NAT gateway
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat_gw.nat_gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: private
          route: nat-gateway
        state: present

    # - name: Create NAT gateway attached to the public subnet (allow access to internet for instances in private subnet)
    #   amazon.aws.ec2_vpc_nat_gateway:
    #     subnet_id: "{{ subnet.subnet.id }}"
    #     if_exist_do_not_create: true
    #     wait: false  # Long running tasks, the availability will checked later
    #     state: present

    - name: Create security group for bastion
      amazon.aws.ec2_security_group:
        name: "{{ resource_prefix }}-sg"
        vpc_id: "{{ vpc.vpc.id }}"
        description: Security group for Bastion host
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 22
            to_port: 22
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 443
            to_port: 443
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: -1
        state: present
      register: secgroup

    # # Create key pair to connect to the VM
    # - name: Create directory to generate keys in
    #   ansible.builtin.file:
    #     path: "{{ playbook_dir }}"
    #     state: directory

    # - name: Generate RSA keys
    #   community.crypto.openssh_keypair:
    #     path: "{{ playbook_dir }}/id_rsa"

    # - name: Create key pair to connect to the VM
    #   amazon.aws.ec2_key:
    #     name: "{{ resource_prefix }}-key"
    #     key_material: "{{ lookup('file', playbook_dir + '/id_rsa.pub') }}"

    - name: Ensure IAM instance role exists
      amazon.aws.iam_role:
        name: "ansible-test-{{ tiny_prefix }}-aws-ssm-role"
        assume_role_policy_document: "{{ lookup('file','ec2-trust-policy.json') }}"
        state: present
        create_instance_profile: yes
        managed_policy:
        - AmazonSSMManagedInstanceCore
        wait: True
      register: role_output

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}"
        instance_type: "t3.micro"
        image_id: "{{ images.images.0.image_id }}"
        # key_name: "{{ resource_prefix }}-key"
        subnet_id: "{{ subnet.subnet.id }}"
        ebs_optimized: true
        instance_role: "{{ role_output.iam_role.role_name }}"
        # network:
        #   assign_public_ip: true
        #   groups:
        #     - "{{ secgroup.group_id }}"
        # security_groups:
        #   - "{{ secgroup.group_id }}"
        user_data: |
          #!/bin/sh
          sudo dnf install -y python3 https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl start amazon-ssm-agent
        wait: true
        state: started
